;;; package --- An implementation of heap sort.

;;; Commentary:

;;; Code:

(defun heap-sort (list)
  "Sort LIST by heap sort algorithm."
  (let ((heap (make-vector (1+ (length list)) 0))
        (up-heap (lambda (val heap)
                   (let* ((idx (aref heap 0))
                          (pidx (/ idx 2))
                          (pval (aref heap pidx)))
                     (aset heap 0 (1+ idx))
                     (aset heap idx val)
                     (while (< 0 pidx)
                       (if (< val pval)
                           (setq pidx 0)
                         (aset heap pidx val)
                         (aset heap idx pval)
                         (setq idx pidx)
                         (setq pidx (/ idx 2))
                         (setq pval (aref heap pidx)))))))
        (down-heap (lambda (heap)
                     (let* ((idx (aref heap 0))
                            (pval (aref heap idx))
                            (top 1)
                            lidx lval ridx rval)
                       (prog1 (aref heap 1)
                         (if (= idx (1+ top))
                             (aset heap top pval)
                           (while (< (* top 2) idx)
                             (setq lidx (* top 2))
                             (setq ridx (1+ lidx))
                             (setq lval (aref heap lidx))
                             (setq rval (aref heap ridx))
                             (cond ((and (< rval lval)
                                         (< pval lval))
                                    (aset heap lidx pval)
                                    (aset heap top lval)
                                    (setq top lidx))
                                   ((and (< lval rval)
                                         (< pval rval))
                                    (aset heap ridx pval)
                                    (aset heap top rval)
                                    (setq top ridx))
                                   (t
                                    (aset heap top pval)
                                    (setq top idx)))))
                         (aset heap 0 (1- idx))))))
        result)
    (aset heap 0 1)
    (dolist (i list)
      (funcall up-heap i heap))
    (aset heap 0 (1- (length heap)))
    (dolist (i list)
      (push (funcall down-heap heap) result))
    result))

(provide 'heap-sort)
;;; heap-sort.el ends here
